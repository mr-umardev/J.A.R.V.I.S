import streamlit as st 
import sqlite3
import subprocess
import sys
import os
import time

# Function to start Jarvis
def run_jarvis():
    """Ensures that jarvis.py runs in the correct environment while allowing page navigation."""
    
    python_exec = sys.executable  # Ensure the correct Python interpreter
    jarvis_path = os.path.join(os.getcwd(), "jarvis.py")  # Ensure full path

    try:
        # Set page state for video loading
        st.session_state["page"] = "loading_video"  
        st.rerun()
    except Exception as e:
        st.error(f"Error starting Jarvis: {e}")

# Handle page navigation
if "page" not in st.session_state:
    st.session_state["page"] = "home"  # Default page

if st.session_state["page"] == "loading_video":
    # First Video Background (Before Jarvis Starts)
    st.markdown(
        """
        <style>
        .video-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: -1;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        </style>
        <div class="video-container">
            <video autoplay muted>
                <source src="IronStartUp.webm" type="video/webm">
            </video>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.write("**Starting Jarvis... Please Wait...**")
    
    # Ensure the video plays before transitioning
    time.sleep(5)  
    
    # Start Jarvis after video completes
    python_exec = sys.executable
    jarvis_path = os.path.join(os.getcwd(), "jarvis.py")
    subprocess.Popen(
        [python_exec, jarvis_path],  
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE, 
        text=True,
        creationflags=subprocess.CREATE_NEW_CONSOLE  # Open in new console (Windows)
    )

    # Switch to the second background AFTER delay
    st.session_state["page"] = "jarvis_page"
    st.rerun()

elif st.session_state["page"] == "jarvis_page":
    # Second Video Background (After Jarvis Starts)
    st.markdown(
        """
        <style>
        .video-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: -1;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        </style>
        <div class="video-container">
            <video autoplay muted loop>
                <source src="second_background.webm" type="video/webm">
            </video>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.title("Jarvis is Running...")
    st.write("You can now use voice commands.")
    
    if st.button("Back to Home"):
        st.session_state["page"] = "home"
        st.rerun()

else:
    # Home Page UI
    st.title("Welcome to Jarvis AI")
    st.write("Click the button below to activate Jarvis.")

    if st.button("Run Jarvis"):
        run_jarvis()  # Fixed syntax


New Open
import streamlit as st
import sqlite3
import subprocess
import sys
import os
import time

# Function to start Jarvis
def run_jarvis():
    """Ensures that jarvis.py runs in the correct environment while allowing page navigation."""
    
    python_exec = sys.executable  # Ensure the correct Python interpreter
    jarvis_path = os.path.join(os.getcwd(), "jarvis.py")  # Ensure full path

    try:
        # Set page state for video loading
        st.session_state["page"] = "loading_video"  
        st.rerun()
    except Exception as e:
        st.error(f"Error starting Jarvis: {e}")

# Handle page navigation
if "page" not in st.session_state:
    st.session_state["page"] = "home"  # Default page

if st.session_state["page"] == "loading_video":
    st.video("IronStartUp.webm")  # <-- FIX: Use st.video() for better compatibility
    st.write("**Starting Jarvis... Please Wait...**")
    
    # Delay to ensure the video plays before starting Jarvis
    time.sleep(22)
    
    # Start Jarvis after video completes
    python_exec = sys.executable
    jarvis_path = os.path.join(os.getcwd(), "jarvis.py")
    subprocess.Popen(
        [python_exec, jarvis_path],  
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE, 
        text=True,
        creationflags=subprocess.CREATE_NEW_CONSOLE  # Open in new console (Windows)
    )

    # Switch to the second background after Jarvis starts
    st.session_state["page"] = "jarvis_page"
    st.rerun()

elif st.session_state["page"] == "jarvis_page":
    st.video("TechIron.mp4")  # <-- FIX: Using st.video() instead of HTML embedding
    st.title("Jarvis is Running...")
    st.write("You can now use voice commands.")
    
    if st.button("Back to Home"):
        st.session_state["page"] = "home"
        st.rerun()

else:
    # Home Page UI
    st.title("Welcome to Jarvis AI")
    st.write("Click the button below to activate Jarvis.")

    if st.button("Run Jarvis"):
        run_jarvis()







import streamlit as st
import base64
import os

def get_base64_video(video_path):
    with open(video_path, "rb") as video_file:
        return base64.b64encode(video_file.read()).decode()

def set_background_video():
    video_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "IronStartUp.mp4")
    video_base64 = get_base64_video(video_path)
    
    st.markdown(
        f"""
        <style>
            .stApp {{
                background: none;
            }}
            .main {{
                background: none !important;
            }}
            video.background-video {{
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                min-width: 100%;
                min-height: 100%;
                width: auto;
                height: auto;
                z-index: -1;
            }}
        </style>
        <video class="background-video" autoplay muted playsinline>
            <source src="data:video/mp4;base64,{video_base64}" type="video/mp4">
        </video>
        """,
        unsafe_allow_html=True
    )

def main():
    set_background_video()
    
    st.title("Welcome to Jarvis AI")
    st.write("Click the button below to activate Jarvis.")
    
    if st.button("Run Jarvis"):
        pass

if __name__ == "__main__":
    main()